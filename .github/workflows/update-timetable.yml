name: Update Timetable Data & Professor Info

on:
  schedule:
    # Run every 4 hours
    - cron: "0 */4 * * *"
  workflow_dispatch: # Allow manual trigger

# *** ADD THIS PERMISSIONS BLOCK ***
permissions:
  contents: write # Allow workflow to push code changes

jobs:
  update-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install supabase python-dotenv cloudscraper beautifulsoup4 httpx postgrest

      - name: Set up Supabase environment variables
        env:
          SUPABASE_URL_SECRET: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY_SECRET: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "Setting Supabase environment variables..."
          if [ -z "$SUPABASE_URL_SECRET" ]; then echo "::error::SUPABASE_URL secret not set."; exit 1; fi
          if [ -z "$SUPABASE_SERVICE_KEY_SECRET" ]; then echo "::error::SUPABASE_SERVICE_ROLE_KEY secret not set."; exit 1; fi
          echo "SUPABASE_URL=$SUPABASE_URL_SECRET" >> $GITHUB_ENV
          echo "SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_KEY_SECRET" >> $GITHUB_ENV
          echo "Supabase variables configured."

      - name: Scrape Timetable Data (Step 1)
        id: scrape
        run: |
          echo "Running timetable scraper..."
          python scripts/scrape_timetable.py --output public/classes.csv
          exit_code=$?
          echo "Scraper finished with exit code $exit_code."
          if [ $exit_code -ne 0 ]; then
            echo "::error::Scraper failed with exit code $exit_code!"
            exit $exit_code
          fi

      - name: Update Teacher Table in DB (Step 2)
        id: update_teachers
        run: |
          echo "Running teacher update script..."
          python scripts/update_teachers.py
          exit_code=$?
          echo "Teacher update script finished with exit code $exit_code."
          if [ $exit_code -ne 0 ]; then
            echo "::error::Teacher update script failed with exit code $exit_code!"
            exit $exit_code
          fi

      - name: Generate Professor Schedule JSON (Step 3)
        id: generate_json
        run: |
          echo "Running professor schedule generation script..."
          python scripts/generate_schedule.py
          exit_code=$?
          echo "Professor schedule generation finished with exit code $exit_code."
          if [ $exit_code -ne 0 ]; then
            echo "::error::Schedule generation failed with exit code $exit_code!"
            exit $exit_code
          fi

      - name: Commit and push data changes (Step 4)
        run: |
          echo "Checking for changes in classes.csv and scheduleData.json..."
          git add public/classes.csv public/scheduleData.json

          if git diff --staged --quiet; then
            echo "No changes detected in CSV or JSON files to commit."
          else
            echo "Changes detected. Committing and pushing..."
            # *** UPDATED User Name/Email ***
            git config user.name "Taha Parker via GitHub Actions"
            git config user.email "98612931+tahayparker@users.noreply.github.com"
            git commit -m "Update timetable CSV and professor schedule JSON [skip ci]"
            # Retry logic for push
            git push || (sleep 5 && git push) || (sleep 10 && git push)
            if [ $? -ne 0 ]; then
              echo "::error::Failed to push changes after multiple retries."
              exit 1
            fi
            echo "Changes committed and pushed."
          fi

      - name: Cleanup # Optional
        run: |
          echo "Workflow finished successfully."