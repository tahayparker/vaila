name: Approve Professor Details Update

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: read

jobs:
  approve:
    runs-on: ubuntu-latest
    # Only run if comment is exactly "approve", issue has "contact" label, and commenter is tahayparker
    if: |
      contains(github.event.comment.body, 'approve') &&
      contains(github.event.issue.labels.*.name, 'contact') &&
      github.event.issue.state == 'open' &&
      github.event.comment.user.login == 'tahayparker'

    steps:
      - name: Debug workflow condition
        run: |
          echo "=== WORKFLOW CONDITION DEBUG ==="
          echo "Comment body (raw): '${{ github.event.comment.body }}'"
          echo "Comment user: '${{ github.event.comment.user.login }}'"
          echo "Issue state: '${{ github.event.issue.state }}'"
          echo "Issue labels: ${{ toJson(github.event.issue.labels.*.name) }}"
          echo "Contains contact label: ${{ contains(github.event.issue.labels.*.name, 'contact') }}"
          echo "Comment equals 'approve': ${{ github.event.comment.body == 'approve' }}"
          echo "User is tahayparker: ${{ github.event.comment.user.login == 'tahayparker' }}"
          echo "Issue is open: ${{ github.event.issue.state == 'open' }}"
          echo "=== END DEBUG ==="
      - name: Extract professor details from issue
        id: extract
        run: |
          # Get issue body using GitHub API
          ISSUE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}")
          BODY=$(echo "$ISSUE_DATA" | jq -r '.body')

          # Extract full name (after "**Full name**:")
          NAME=$(echo "$BODY" | grep -i "Full name" | sed 's/.*Full name.*: *//' | sed 's/\[Enter name here\]//' | xargs)

          # Extract email (after "Email:")
          EMAIL=$(echo "$BODY" | grep -i "Email:" | sed 's/.*Email: *//' | sed 's/\[Enter email.*\]//' | xargs)

          # Extract phone (after "Phone:")
          PHONE=$(echo "$BODY" | grep -i "Phone:" | sed 's/.*Phone: *//' | sed 's/\[Enter phone.*\]//' | xargs)

          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "email=$EMAIL" >> $GITHUB_OUTPUT
          echo "phone=$PHONE" >> $GITHUB_OUTPUT

          echo "Extracted details:"
          echo "Name: '$NAME'"
          echo "Email: '$EMAIL'"
          echo "Phone: '$PHONE'"

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python dependencies
        run: |
          cd scripts
          pip install -r requirements.txt

      - name: Update professor details in database
        run: |
          set -e

          NAME="${{ steps.extract.outputs.name }}"
          EMAIL="${{ steps.extract.outputs.email }}"
          PHONE="${{ steps.extract.outputs.phone }}"

          echo "Updating professor: $NAME"
          echo "Email: $EMAIL"
          echo "Phone: $PHONE"

          # Build command arguments
          ARGS=("$NAME")

          # Add email if provided and not "[Not provided]"
          if [ -n "$EMAIL" ] && [ "$EMAIL" != "" ] && [ "$EMAIL" != "[Not provided]" ]; then
            ARGS+=("--email" "$EMAIL")
          fi

          # Add phone if provided and not "[Not provided]"
          if [ -n "$PHONE" ] && [ "$PHONE" != "" ] && [ "$PHONE" != "[Not provided]" ]; then
            ARGS+=("--phone" "$PHONE")
          fi

          # Check if we have at least one field to update
          if [ ${#ARGS[@]} -eq 1 ]; then
            echo "No valid email or phone provided for update"
            # Create comment using GitHub API
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"body": "**Approval failed**: No valid email or phone number found in the issue to update."}' \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
            exit 1
          fi

          # Run the Python script
          cd scripts
          python update_professor_details.py "${ARGS[@]}"

        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      - name: Add approval comment and close issue
        run: |
          UPDATED_FIELDS=""
          if [ -n "${{ steps.extract.outputs.email }}" ] && [ "${{ steps.extract.outputs.email }}" != "" ]; then
            UPDATED_FIELDS="Email: \`${{ steps.extract.outputs.email }}\`"
          fi

          if [ -n "${{ steps.extract.outputs.phone }}" ] && [ "${{ steps.extract.outputs.phone }}" != "" ]; then
            if [ -n "$UPDATED_FIELDS" ]; then
              UPDATED_FIELDS="$UPDATED_FIELDS<br>Phone: \`${{ steps.extract.outputs.phone }}\`"
            else
              UPDATED_FIELDS="Phone: \`${{ steps.extract.outputs.phone }}\`"
            fi
          fi

          # Create success comment using GitHub API
          COMMENT_BODY="**Approved by @${{ github.event.comment.user.login }}**

          Professor **${{ steps.extract.outputs.name }}** details have been successfully updated in the database.

          **Updated fields:**
          $UPDATED_FIELDS

          This issue is now closed."

          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": $(echo "$COMMENT_BODY" | jq -Rs .)}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"

          # Close issue using GitHub API
          curl -s -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"state": "closed", "state_reason": "completed"}' \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}"
