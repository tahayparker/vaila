name: Approve Contact

on:
  workflow_dispatch:
    inputs:
      issue:
        description: 'Issue number'
        required: true

jobs:
  approve:
    runs-on: ubuntu-latest

    steps:
      - name: Check if issue has "contact" label
        id: check-label
        run: |
          LABELS=$(gh issue view ${{ github.event.inputs.issue }} --json labels -q '.labels[].name')
          echo "labels=$LABELS" >> $GITHUB_ENV
          if echo "$LABELS" | grep -qw "contact"; then
            echo "has_contact=true" >> $GITHUB_ENV
          else
            echo "has_contact=false" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail if missing label
        if: env.has_contact != 'true'
        run: |
          echo "❌ Issue does not have the 'contact' label. Skipping."
          exit 1

      - name: Extract issue body
        id: issue
        run: |
          body=$(gh issue view ${{ github.event.inputs.issue }} --json body -q .body)

          name=$(echo "$body" | grep -i "Full name:" | sed 's/Full name:[ ]*//')
          email=$(echo "$body" | grep -i "Email:" | sed 's/Email:[ ]*//')
          phone=$(echo "$body" | grep -i "Phone:" | sed 's/Phone:[ ]*//')

          echo "name=$name" >> $GITHUB_OUTPUT
          echo "email=$email" >> $GITHUB_OUTPUT
          echo "phone=$phone" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Supabase
        run: |
          set -e
          RESULT=$(psql $DATABASE_URL -t -c "
            WITH updated AS (
              UPDATE \"Teacher\"
              SET
                \"Email\" = CASE WHEN '${{ steps.issue.outputs.email }}' <> '' THEN '${{ steps.issue.outputs.email }}' ELSE \"Email\" END,
                \"Phone\" = CASE WHEN '${{ steps.issue.outputs.phone }}' <> '' THEN '${{ steps.issue.outputs.phone }}' ELSE \"Phone\" END
              WHERE \"Name\" = '${{ steps.issue.outputs.name }}'
              RETURNING *
            )
            SELECT COUNT(*) FROM updated;
          ")
          COUNT=$(echo $RESULT | xargs)

          if [ "$COUNT" -eq 0 ]; then
            echo "Professor not found in DB."
            gh issue comment ${{ github.event.inputs.issue }} \
              --body "⚠️ Approval failed: Professor **${{ steps.issue.outputs.name }}** not found in database."
            exit 1
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Close Issue as Approved
        run: |
          gh issue comment ${{ github.event.inputs.issue }} \
            --body "✅ Approved by @${{ github.actor }}. Updated fields: Email=${{ steps.issue.outputs.email }}, Phone=${{ steps.issue.outputs.phone }}."
          gh issue close ${{ github.event.inputs.issue }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
