name: Approve Contact

on:
  workflow_dispatch:
    inputs:
      issue:
        description: 'Issue number'
        required: true

jobs:
  approve:
    if: contains(github.event.issue.labels.*.name, 'contact')
    runs-on: ubuntu-latest

    steps:
      - name: Extract issue body
        id: issue
        run: |
          body=$(gh issue view ${{ github.event.inputs.issue }} --json body -q .body)
          echo "body<<EOF" >> $GITHUB_ENV
          echo "$body" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          name=$(echo "$body" | awk -F'|' '/\|/{print $2}' | sed 's/^[ \t]*//;s/[ \t]*$//' | head -n 1)
          email=$(echo "$body" | awk -F'|' '/\|/{print $3}' | sed 's/^[ \t]*//;s/[ \t]*$//' | head -n 1)
          phone=$(echo "$body" | awk -F'|' '/\|/{print $4}' | sed 's/^[ \t]*//;s/[ \t]*$//' | head -n 1)

          echo "name=$name" >> $GITHUB_OUTPUT
          echo "email=$email" >> $GITHUB_OUTPUT
          echo "phone=$phone" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Supabase
        run: |
          set -e
          RESULT=$(psql $DATABASE_URL -t -c "
            WITH updated AS (
              UPDATE \"Teacher\"
              SET
                \"Email\" = CASE WHEN '${{ steps.issue.outputs.email }}' <> '' THEN '${{ steps.issue.outputs.email }}' ELSE \"Email\" END,
                \"Phone\" = CASE WHEN '${{ steps.issue.outputs.phone }}' <> '' THEN '${{ steps.issue.outputs.phone }}' ELSE \"Phone\" END
              WHERE \"Name\" = '${{ steps.issue.outputs.name }}'
              RETURNING *
            )
            SELECT COUNT(*) FROM updated;
          ")
          COUNT=$(echo $RESULT | xargs)

          if [ "$COUNT" -eq 0 ]; then
            echo "Professor not found in DB."
            gh issue comment ${{ github.event.inputs.issue }} \
              --body "⚠️ Approval failed: Professor **${{ steps.issue.outputs.name }}** not found in database."
            exit 1
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Close Issue as Approved
        run: |
          gh issue comment ${{ github.event.inputs.issue }} \
            --body "✅ Approved by @${{ github.actor }}. Updated fields: Email=${{ steps.issue.outputs.email }}, Phone=${{ steps.issue.outputs.phone }}."
          gh issue close ${{ github.event.inputs.issue }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
